You are given an array arr of size n consisting of non-empty strings.

Find a string array answer of size n such that:

answer[i] is the shortest substring of arr[i] that does not occur as a substring in any other string in arr. If multiple such substrings exist, answer[i] should be the lexicographically smallest. And if no such substring exists, answer[i] should be an empty string.
Return the array answer.

 

Example 1:

Input: arr = ["cab","ad","bad","c"]
Output: ["ab","","ba",""]
Explanation: We have the following:
- For the string "cab", the shortest substring that does not occur in any other string is either "ca" or "ab", we choose the lexicographically smaller substring, which is "ab".
- For the string "ad", there is no substring that does not occur in any other string.
- For the string "bad", the shortest substring that does not occur in any other string is "ba".
- For the string "c", there is no substring that does not occur in any other string.
Example 2:

Input: arr = ["abc","bcd","abcd"]
Output: ["","","abcd"]
Explanation: We have the following:
- For the string "abc", there is no substring that does not occur in any other string.
- For the string "bcd", there is no substring that does not occur in any other string.
- For the string "abcd", the shortest substring that does not occur in any other string is "abcd".
 

Constraints:

n == arr.length
2 <= n <= 100
1 <= arr[i].length <= 20
arr[i] consists only of lowercase English letters.

*-----------------------------Python solution code-------------------------------*

class Solution:
    def check(self, a, b):
        if len(a) > len(b):
            return True
        if len(a) < len(b):
            return False
        for i in range(len(a)):
            if a[i] < b[i]:
                return False
            elif a[i] > b[i]:
                return True
        return False
    
    def shortestSubstrings(self, arr):
        mp = {}
        for s in arr:
            m = len(s)
            for i in range(m):
                temp = ""
                for j in range(i, m):
                    temp += s[j]
                    mp[temp] = mp.get(temp, 0) + 1
        
        n = len(arr)
        ans = [""] * n
        for k in range(n):
            str_ = arr[k]
            m = len(str_)
            mp1 = {}
            for i in range(m):
                temp = ""
                for j in range(i, m):
                    temp += str_[j]
                    mp1[temp] = mp1.get(temp, 0) + 1
            
            for qw, pq in mp1.items():
                if mp.get(qw, 0) == pq:
                    if ans[k] == "" or self.check(ans[k], qw):
                        ans[k] = qw
        return ans
